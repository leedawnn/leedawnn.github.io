{"componentChunkName":"component---src-templates-post-jsx","path":"/react-components/","result":{"data":{"site":{"siteMetadata":{"title":"leedawn"}},"markdownRemark":{"id":"5e6ba77f-d46d-5a11-9dc8-7d9bcaf2604a","excerpt":"컴포넌트를 분리하는 방법에는 어떤 것이 있을까? 컴포넌트를 분리하는 방법론들에 따라, 컴포넌트를 분리하는 \"기준\"이 달라지게 된다. 보통 컴포넌트를 분리하는 방법론은 아래와 같이 나뉜다. 컴포넌트의 관심사 분리(Separation of Concerns, SoC) headless 컴포넌트 SOLID, 단일 책임의 원칙 이 방법론들은 각각 어떤 기준을 가지고…","html":"<h2>컴포넌트를 분리하는 방법에는 어떤 것이 있을까?</h2>\n<p>컴포넌트를 분리하는 방법론들에 따라, 컴포넌트를 분리하는 \"기준\"이 달라지게 된다.<br>\n보통 컴포넌트를 분리하는 방법론은 아래와 같이 나뉜다.</p>\n<ol>\n<li><strong>컴포넌트의 관심사 분리(Separation of Concerns, SoC)</strong></li>\n<li><strong>headless 컴포넌트</strong></li>\n<li><strong>SOLID, 단일 책임의 원칙</strong></li>\n</ol>\n<p>이 방법론들은 각각 어떤 기준을 가지고 있는지 하나씩 알아보자.</p>\n<h2>컴포넌트의 관심사 분리(Separation of Concerns, SoC)</h2>\n<h3>관심사의 분리란?</h3>\n<ul>\n<li>관심사의 분리란 복잡한 코드를 비슷한 기능을 하는 코드끼리 별도로 관리하는 것을 말한다.</li>\n<li>프로그램을 구별된 '개개의 관심사를 해결하는 부분'으로 분리하는 디자인 원칙이다.</li>\n<li>컴포넌트 별로 관심사를 분리하면 확장성과 재사용성을 높일 수 있다.</li>\n</ul>\n<h3>컴포넌트를 분리하는 이유</h3>\n<ul>\n<li>컴포넌트는 의도에 따라 <strong>UI를 표현</strong>하고자 하거나 <strong>동작하는 로직</strong>을 담을 수 있다.</li>\n<li>이처럼 컴포넌트는 재사용할 수 있는 최소 UI 단위임에도 불구하고, 웹의 복잡도와 해당 컴포넌트에서 수행하려고 하는 역할에 따라 얼마든지 복잡해질 수 있다.</li>\n<li>따라서 '관심사의 분리' 원칙에 따라 컴포넌트를 분리해서 관리하여야 한다.</li>\n</ul>","frontmatter":{"title":"🚀 React에서 컴포넌트를 분리하는 기준","date":"February 26, 2024","update":"February 26, 2024","tags":["react","components"],"series":"react"},"fields":{"slug":"/react-components/","readingTime":{"minutes":1.965}}},"seriesList":{"edges":[{"node":{"id":"5e6ba77f-d46d-5a11-9dc8-7d9bcaf2604a","fields":{"slug":"/react-components/"},"frontmatter":{"title":"🚀 React에서 컴포넌트를 분리하는 기준"}}}]},"previous":null,"next":{"fields":{"slug":"/login-logics/"},"frontmatter":{"title":"🔧 로그인 로직 이해하기"}}},"pageContext":{"id":"5e6ba77f-d46d-5a11-9dc8-7d9bcaf2604a","series":"react","previousPostId":null,"nextPostId":"ccfbbea4-08d5-5f3b-87fa-bdf6e1f09d59"}},"staticQueryHashes":[],"slicesMap":{}}