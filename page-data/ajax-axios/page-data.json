{"componentChunkName":"component---src-templates-post-jsx","path":"/ajax-axios/","result":{"data":{"site":{"siteMetadata":{"title":"leedawn"}},"markdownRemark":{"id":"1be61c7e-48fb-5f5b-8891-34515136b66a","excerpt":"Ajax (Asynchronous Javascript and XML) Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있다. 즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹페이지의 일부분만 표시 할 수 있다. 동작 방식 Ajax는  객체를 사용하여 서버와 통신한다. 이 객체를 통해 데이터를 …","html":"<h2>Ajax (Asynchronous Javascript and XML)</h2>\n<p>Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있다. 즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹페이지의 일부분만 표시 할 수 있다.</p>\n<h3>동작 방식</h3>\n<p>Ajax는 <code class=\"language-text\">XMLHttpRequest</code> 객체를 사용하여 서버와 통신한다. 이 객체를 통해 데이터를 비동기적으로 교환할 수 있으며, 페이지 전체를 새로고침하지 않고도 일부분만을 업데이트할 수 있다.</p>\n<h3>사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// XMLHttpRequest 객체 생성</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url-to-the-server\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 요청 초기화 (HTTP 요청 메서드, 요청을 보낼 서버의 url, 비동기적으로 요청할 것인지 boolean)</span>\n<span class=\"token comment\">// 응답 처리 이벤트 핸들러 (xhr.readyState === 4는 요청 완료되었음을 나타냄)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 서버로부터 받은 데이터 처리</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 요청 전송</span></code></pre></div>\n<h3>한계</h3>\n<p>Ajax는 <code class=\"language-text\">XMLHttpRequest</code> 객체를 사용하여 비동기 통신을 구현한다. 하지만 사용법이 복잡하고, 콜백 지옥(callback hell)과 같은 문제가 발생할 수 있다. 또한 JSON 데이터를 처리하기 위한 추가적인 변환 작업이 필요하다.</p>\n<h3>Fetch의 등장 배경</h3>\n<p>Fetch API는 <code class=\"language-text\">Promise</code>를 기반으로 하여 비동기 통신을 더욱 간결하고 직관적으로 만들 수 있게 해준다. Fetch는 <code class=\"language-text\">XMLHttpRequest</code>보다 더 유연하고 강력한 기능을 제공하며, 직접적으로 JSON을 지원하여 데이터 처리가 훨씬 간편해졌다.</p>\n<h2>Fetch API</h2>\n<p>Fetch API는 브라우저의 <code class=\"language-text\">window</code> 객체에 내장되어 있으며, <code class=\"language-text\">Request</code>와 <code class=\"language-text\">Response</code> 객체를 사용하여 요청과 응답을 쉽게 처리할 수 있다.</p>\n<h3>사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response: \"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// JSON 데이터로 변환</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error: \"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>fetch는 첫번째 인자로 <code class=\"language-text\">url</code>, 두번째 인자로 <code class=\"language-text\">옵션 객체</code>를 받고, <code class=\"language-text\">Promise</code> 타입의 객체를 반환한다. 반환된 객체는 API 호출이 성공했을 경우에는 응답(response) 객체를 <code class=\"language-text\">resolve</code>하고, 실패했을 경우에는 예외(error) 객체를 <code class=\"language-text\">reject</code>한다.</p>\n<h3>한계</h3>\n<p>Fetch API는 많은 개선점을 제공하지만, 여전히 몇 가지 한계가 있다.<br>\n예를 들어, Fetch는 요청 시간 초과(timeouts)를 직접적으로 지원하지 않는다. 또한 브라우저 호환성 문제와 일부 기능(진행 상태 추적 등)에 대한 제한이 있을 수 있다.</p>\n<h3>Axios의 등장 배경</h3>\n<p>Axios는 Fetch의 모든 장점을 가지면서도, Fetch의 한계를 극복하기 위해 등장했다. Axios는 요청 시간 초과 설정, 요청 취소, HTTP 상태 코드에 따른 자동 변환, 진행 상태 추적 등 추가적인 기능을 제공한다. 또한 브라우저뿐만 아니라 Node.js 환경에서도 사용할 수 있어서 서버 사이드와 클라이언트 사이드 모두 사용된다.</p>\n<h2>Axios</h2>\n<p>Axios는 HTTP 요청을 보내기 위한 자바스크립트 라이브러리이다. Axios는 내부적으로 <code class=\"language-text\">XMLHttpRequest</code>를 사용하지만, <code class=\"language-text\">Promise</code> 기반의 API를 제공하여 보다 쉬운 비동기 처리를 가능하게 한다. 또한, 요청과 응답을 JSON 형태로 자동 변환해주거나 에러 처리 등과 추가적인 기능을 제공한다. 보통 아래와 같이 <code class=\"language-text\">async/await</code>와 함께 사용한다.</p>\n<p>Fetch API와 비교했을 때 차이점을 좀 더 자세히 알아보자면, 아래와 같다.</p>\n<ul>\n<li>\n<p><strong>자동 JSON 변환</strong></p>\n<p>Axios는 <code class=\"language-text\">response</code>를 자동으로 JSON 형태로 변환해준다. 반면, Fetch API는 <code class=\"language-text\">response</code>가 도착했을 때, <code class=\"language-text\">.json()</code>을 호출하여 수동으로 변환해야한다.</p>\n</li>\n<li>\n<p><strong>에러 처리</strong></p>\n<p>Fetch API는 네트워크 오류가 발생하지 않는 한 요청 실패를 액션이 실패로 간주하지 않는다. 즉, 404나 500 같은 서버 에러 상태에서도 <code class=\"language-text\">.then()</code>을 실행한다. 반면, Axios는 2xx 범위 외의 HTTP 상태 코드를 받으면 자동으로 에러를 발생시킨다.</p>\n</li>\n<li>\n<p><strong>브라우저 지원</strong></p>\n<p>Fetch API는 일부 구형 브라우저에서는 기본적으로 지원되지 않을 수 있다. 반면, Axios는 모든 브라우저에서 작동하도록 Promise API를 사용한다.</p>\n</li>\n<li>\n<p><strong>timeout 설정</strong></p>\n<p>Axios는 요청 타임아웃을 설정하는 옵션이 내장되어 있다. Fetch API에서는 이를 직접 구현해야한다.</p>\n</li>\n</ul>\n<h3>사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url-to-the-server\"</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error! : \"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>더 자세한 사용법을 알고싶다면, <a href=\"https://leedawnn.github.io/error-handling/\"><strong>⚠️ 자바스크립트의 예외 처리</strong></a> 글을 참고!</p>","frontmatter":{"title":"🦚 Ajax와 fetch, Axios는 어떻게 다를까?","date":"March 13, 2024","update":"March 13, 2024","tags":["ajax","fetch","axios"],"series":null},"fields":{"slug":"/ajax-axios/","readingTime":{"minutes":6.14}}},"seriesList":{"edges":[{"node":{"id":"ccfbbea4-08d5-5f3b-87fa-bdf6e1f09d59","fields":{"slug":"/login-logics/"},"frontmatter":{"title":"🔧 로그인 로직 이해하기"}}},{"node":{"id":"e1bbc6c4-39e7-51cb-a5df-f9adfed5b6fc","fields":{"slug":"/spa-mpa/"},"frontmatter":{"title":"🤔 SPA vs MPA와 SSR vs CSR"}}},{"node":{"id":"1be61c7e-48fb-5f5b-8891-34515136b66a","fields":{"slug":"/ajax-axios/"},"frontmatter":{"title":"🦚 Ajax와 fetch, Axios는 어떻게 다를까?"}}}]},"previous":{"fields":{"slug":"/error-handling/"},"frontmatter":{"title":"⚠️ 자바스크립트의 예외 처리"}},"next":{"fields":{"slug":"/js-type/"},"frontmatter":{"title":"🙌 값에 의한 전달(Pass by Value)와 참조에 의한 전달(Pass by Reference) "}}},"pageContext":{"id":"1be61c7e-48fb-5f5b-8891-34515136b66a","series":null,"previousPostId":"afc19cf4-a1e3-5afe-9af9-ed1df7cfffc9","nextPostId":"80dd7fbe-0e4c-5634-a3cb-8327ae89bf83"}},"staticQueryHashes":[],"slicesMap":{}}