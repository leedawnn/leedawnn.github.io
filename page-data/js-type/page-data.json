{"componentChunkName":"component---src-templates-post-jsx","path":"/js-type/","result":{"data":{"site":{"siteMetadata":{"title":"leedawn"}},"markdownRemark":{"id":"80dd7fbe-0e4c-5634-a3cb-8327ae89bf83","excerpt":"알고리즘을 풀면서 아래와 같은 함수를 작성하여, 값을 변경하고 두 수의 위치를 바꾸려고 했다. 하지만 의도와는 다르게 은 위치를 바꾸지 못하고 는 원본 그대로를 출력한다. 왜 함수 n1, n2의 값을 변경하지 못하는 걸까? 🥲 자바스크립트에서 기본 타입(primitive types)은 으로 함수에 전달되기 때문이다. 이는 함수에 값을 전달할 때, 실제 값…","html":"<p>알고리즘을 풀면서 아래와 같은 함수를 작성하여, 값을 변경하고 두 수의 위치를 바꾸려고 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">&lt;</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    n1 <span class=\"token operator\">=</span> n2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    n2 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr\n\n<span class=\"token function\">changeNum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3, 9]</span></code></pre></div>\n<p>하지만 의도와는 다르게 <code class=\"language-text\">changeNum</code>은 위치를 바꾸지 못하고 <code class=\"language-text\">arr</code>는 원본 그대로를 출력한다.</p>\n<p>왜 함수 n1, n2의 값을 변경하지 못하는 걸까? 🥲</p>\n<p>자바스크립트에서 기본 타입(primitive types)은 <code class=\"language-text\">값에 의한 전달(Pass by Value) 방식</code>으로 함수에 전달되기 때문이다. 이는 <strong>함수에 값을 전달할 때, 실제 값의 복사본이 전달되며, 함수 내에서 매개변수의 값을 변경해도 외부의 변수에는 영향을 미치지 않는다는 것을 의미</strong>한다.</p>\n<p>따라서 changeNum 함수 내에서 n1, n2의 값을 변경해도 a, b 원본에는 영향을 주지 않는다.</p>\n<p>그럼 어떻게 바꿀 수 있을까?</p>\n<h2>참조에 의한 전달(Pass by Reference)</h2>\n<p>객체나 배열과 같은 참조 타입은 <code class=\"language-text\">참조에 의한 전달(Pass by Reference)</code> 방식으로 작동한다. 이 방식에서는 <strong>변수가 실제 데이터가 아닌, 데이터가 저장된 메모리 주소를 참조</strong>한다.</p>\n<p>함수에 참조 타입의 값을 인자로 전달할 때, 전달 되는 것은 실제 데이터의 복사본이 아니라 데이터가 저장된 메모리 주소의 참조이다. <strong>따라서 함수 내에서 참조를 통해 데이터를 변경하면 원본 데이터에도 반영이 된다.</strong></p>\n<p>이러한 방식을 이용하여 n1과 n2 값을 변경하면 객체나 배열을 통해 값을 전달하고, 함수 내에서 객체의 속성이나 배열의 요소를 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">changeNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 3, 9]</span></code></pre></div>\n<h2>값에 의한 전달(Pass by Value)</h2>\n<p>아까 말했듯이 기본 타입(primitive type)인 숫자, 문자열, boolean, null, undefined, Symbol, BigInt은 <code class=\"language-text\">값에 의한 전달(Pass by Value)</code>방식으로 처리한다. 이는 <strong>함수에 기본 타입의 값을 인자로 전달할 때, 실제 값이 아닌 그 값의 복사본이 함수 내부로 전달된다는 의미</strong>이다.</p>\n<p><strong>따라서, 함수 내에서 매개변수의 값을 변경해도 원본 변수의 값에는 영향을 미치지 않는다.</strong></p>\n<p>아래는 값에 의한 전달에 대한 간단한 예시 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">modifyValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"함수 내부: \"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수 내부: 5</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token function\">modifyValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"함수 외부: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수 외부: 3</span></code></pre></div>\n<h2>요약</h2>\n<ul>\n<li>자바스크립트에서 <strong>기본 타입(primitive type)</strong>은 <code class=\"language-text\">값에 의한 전달(Pass by Value)</code> 방식으로 처리된다. 즉, 함수 내에서 매개변수의 값을 변경해도 원본 변수의 값에는 영향을 미치지 않는다.</li>\n<li>반면 객체나 배열 같은 <strong>참조 타입(reference type)</strong>은 <code class=\"language-text\">참조에 의한 전달(Pass by Reference)</code> 방식으로 처리된다.</li>\n</ul>","frontmatter":{"title":"🙌 값에 의한 전달(Pass by Value)와 참조에 의한 전달(Pass by Reference) ","date":"March 21, 2024","update":"March 21, 2024","tags":["javascript","pass by value","pass by reference"],"series":"javascript"},"fields":{"slug":"/js-type/","readingTime":{"minutes":4.135}}},"seriesList":{"edges":[{"node":{"id":"afc19cf4-a1e3-5afe-9af9-ed1df7cfffc9","fields":{"slug":"/error-handling/"},"frontmatter":{"title":"⚠️ 자바스크립트의 예외 처리"}}},{"node":{"id":"80dd7fbe-0e4c-5634-a3cb-8327ae89bf83","fields":{"slug":"/js-type/"},"frontmatter":{"title":"🙌 값에 의한 전달(Pass by Value)와 참조에 의한 전달(Pass by Reference) "}}}]},"previous":{"fields":{"slug":"/ajax-axios/"},"frontmatter":{"title":"🦚 Ajax와 fetch, Axios는 어떻게 다를까?"}},"next":null},"pageContext":{"id":"80dd7fbe-0e4c-5634-a3cb-8327ae89bf83","series":"javascript","previousPostId":"1be61c7e-48fb-5f5b-8891-34515136b66a","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}